version: '3.8'
services:
  180140_travel-mongo:
    container_name: 180140_travel-mongo
    #build: . #
    image: mongo:latest
    restart: always
    volumes:
      - ./travelDB-mongoDB/travel-offers:/var/my-db
      - ./travelDB-mongoDB/init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./travelDB-mongoDB/init-scripts/custom-entrypoint.sh:/custom-entrypoint.sh
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=secret
      - MONGO_INITDB_DATABASE=TravelDB
    networks:
      - backend-network
      
  180140_gateway-api:
    container_name: 180140_gateway-api
    build: ./180140_gateway-api
    depends_on:
      - 180140_travel-mongo
      - 180140_rabbitmq-gateway
      - redis
    environment:
      - FLASK_APP=app.py
      - FLASK_RUN_HOST=0.0.0.0
    networks:
      - backend-network

  frontend:
    container_name: 180140_frontend-api
    build: ./frontend
    ports:
      - "8080:8080"
    environment:
      - FLASK_APP=app/app.py
      - FLASK_RUN_HOST=0.0.0.0
    networks:
      - backend-network

  180140_rabbitmq-gateway:
    container_name: 180140_rabbitmq-gateway
    build: ./180140_rabbitmq-gateway
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend-network
    
  180140_api-gateway:
    container_name: 180140_api-gateway
    build: ./180140_api-gateway
    depends_on:
      - 180140_travel-mongo
      - 180140_rabbitmq-gateway
    networks:
      - backend-network
    
  payment_service:
    container_name: 180140_payment-service
    build: ./microservices/payment
    depends_on:
      - 180140_travel-mongo
      - 180140_rabbitmq-gateway
    environment:
      - FLASK_APP=app.py
    networks:
      - backend-network

  180140_reservation_service:
    container_name: 180140_reservation_service
    build: ./microservices/reservation
    depends_on:
      - 180140_travel-mongo
      - 180140_rabbitmq-gateway
    environment:
      - FLASK_APP=app.py
    networks:
      - backend-network

  postgres_db:
    container_name: 180140_postgres-db-reservations
    build:
      context: ./reservations-postgres
    networks:
      - backend-network

  redis:
    container_name: 180140_redis-service
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend-network


networks:
  backend-network:
    name: backend-network
    driver: bridge
